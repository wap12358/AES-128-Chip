`timescale 1 ns/ 1 ps
module aes_top_vlg_tst();

//parameter
parameter cp_h = 0.5;
parameter cp = (2*cp_h);

// input stimulate
reg clk;
reg config_usual;
reg instruction_data;
reg rst;
reg shakehand_in;
reg [7:0] user_data;
// output receive                                            
wire [7:0]  chip_data;
wire shakehand_out;
                         
aes_top i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.rst(rst),
	.cu(config_usual),
	.id(instruction_data),
	.user_data(user_data),
	.shi(shakehand_in),
	.chip_data(chip_data),
	.sho(shakehand_out)
);

// parameter the test need to use
//config instructions
parameter MOD = 24'h4D4F44; //config mode
parameter E = 8'h45; //means encode
parameter D = 8'h44; //means decode
parameter KEY = 24'h4B4559; //config key length
parameter F = 8'h46 ; //means receive 128(full) length 
parameter Q = 8'h51 ; //means receive 032(quar) length
parameter N = 8'h4E ; //means receive 000(null) length
parameter SPD = 24'h535044; // config output speed  

//choose mode
parameter config_mode = 1'b1;
parameter default_mode = 1'b0;
parameter instruction_mode = 1'b1;
parameter data_mode = 1'b0;
parameter encode_mode = 1'b1;
parameter decode_mode = 1'b0;

// key & txt
reg [127 : 0] key0;

reg [127 : 0] plain0_key0;
reg [127 : 0] plain1_key0;
reg [127 : 0] plain2_key0;
reg [127 : 0] plain3_key0;

reg [127 : 0] cipher0_key0;
reg [127 : 0] cipher1_key0;
reg [127 : 0] cipher2_key0;
reg [127 : 0] cipher3_key0;

reg [127 : 0] cipher0_keyn;

// reg for test
reg [127:0] clk_count;
reg [127:0] result;
reg [7:0] inport_data_counter;
reg [11:0] outport_counter;
reg [127:0] right_output_data;
reg [127:0] right_output_data_new;
reg [15:0] inport_speed;



initial                                                
begin                                                  
clk = 1'b0;
clk_count = 'd0;
config_usual = 1'b1;
instruction_data = 1'b1;
rst = 1'b0;
shakehand_in = 1'b0;
user_data = 8'd0;
result <= 128'd0;
inport_data_counter <= 'd0;
outport_counter <= 'd0;
right_output_data <= 128'd0;
inport_speed <= 'd16;

#cp;     
$display("Running testbench");  
outport_counter <= 'd0;        
rst = 1'b1;

test();

//$stop;                                               
end   

always begin #cp_h clk = ~clk; clk_count = clk ? clk_count+1 : clk_count; end

// read byte
always @(negedge shakehand_out) begin
case(outport_counter[3:0])
4'h0: begin result[127:120] = chip_data; right_output_data = right_output_data_new; end
4'h1: begin result[119:112] = chip_data; end
4'h2: begin result[111:104] = chip_data; end
4'h3: begin result[103: 96] = chip_data; end
4'h4: begin result[ 95: 88] = chip_data; end
4'h5: begin result[ 87: 80] = chip_data; end
4'h6: begin result[ 79: 72] = chip_data; end
4'h7: begin result[ 71: 64] = chip_data; end
4'h8: begin result[ 63: 56] = chip_data; end
4'h9: begin result[ 55: 48] = chip_data; end
4'ha: begin result[ 47: 40] = chip_data; end
4'hb: begin result[ 39: 32] = chip_data; end
4'hc: begin result[ 31: 24] = chip_data; end
4'hd: begin result[ 23: 16] = chip_data; end
4'he: begin result[ 15:  8] = chip_data; end
4'hf: begin result[  7:  0] = chip_data; end
default: begin  end
endcase
if(outport_counter[3:0] == 4'hf) begin
if(result == right_output_data) begin
$display("*** No.%0d : the result is right *** clk_count = %0d ***", outport_counter[11:4] + 1, clk_count);
end
else begin
$display("*** No.%0d : the result is wrong *** clk_count = %0d ***", outport_counter[11:4] + 1, clk_count);
$stop;
end
end
outport_counter = outport_counter + 1;
end

task write_byte(input [7:0] realwrite); begin
	user_data = realwrite;
	shakehand_in = ~shakehand_in;
	#(inport_speed*cp);
end	endtask

task write_32(input [31:0] write_word); begin
	write_byte(write_word[31:24]);
	write_byte(write_word[23:16]);
	write_byte(write_word[15: 8]);
	write_byte(write_word[ 7: 0]);
	if(config_usual == 1'b1 && instruction_data == 1'b1) begin
		case(write_word[31:8])
		MOD: begin 
			case(write_word[7:0])
			E: begin $display("*** system has been configed to \"encode mode\" by an instruction *** clk_count = %0d ***", clk_count); end
			D: begin $display("*** system has been configed to \"decode mode\" by an instruction *** clk_count = %0d ***", clk_count); end
			default: begin  end
			endcase
		end
		KEY: begin 
			case(write_word[7:0])
			F: begin $display("*** system is ready for receive a full key *** clk_count = %0d ***", clk_count); end
			Q: begin $display("*** system is ready for receive a quarter key *** clk_count = %0d ***", clk_count); end
			N: begin $display("*** system has been configed to use the default inside key *** clk_count = %0d ***", clk_count); end
			default: begin  end
			endcase
		end
		SPD: begin $display("*** speed of outport has been configed to %0d clocks per 8bit data *** clk_count = %0d ***", 16'h1 << write_word[3:0], clk_count); end
		default: begin  end
		endcase
	end
end endtask

task set_mode(input cu0, input id0); begin
	wait((outport_counter[3:0] == 4'h0) & (inport_data_counter == outport_counter[11:4]))	
	if(cu0==config_usual) begin
		instruction_data = id0;
	end
	else begin
		rst <= 1'b0;
		config_usual <= cu0;
		instruction_data <= id0;
		#(2*cp);
		rst <= 1'b1;
	end
		case({cu0,id0})
		2'b00: begin $display("*** system has been config to decode mode of default mode *** clk_count = %0d ***", clk_count); end
		2'b01: begin $display("*** system has been config to encode mode of default mode *** clk_count = %0d ***", clk_count); end
		2'b10: begin $display("*** system has been config to data mode of config mode *** clk_count = %0d ***", clk_count); end
		2'b11: begin $display("*** system has been config to instruction mode of config mode *** clk_count = %0d ***", clk_count); end
		default: begin  end
		endcase
end endtask

task write_128(input [127:0] txt, input [127:0] rightresult); begin
	write_32(txt[127:96]);
	write_32(txt[ 95:64]);
	write_32(txt[ 63:32]);
	write_32(txt[ 31: 0]);
	if(config_usual == 1'b0 || instruction_data == 1'b0) begin
		$display("*** No.%0d data has been written : 128'h %08x_%08x_%08x_%08x *** clk_count = %0d ***", inport_data_counter + 1, txt[127:96], txt[95:64], txt[63:32], txt[31: 0], clk_count);
		inport_data_counter = inport_data_counter + 1;
	end
	if(config_usual == 1'b1 && instruction_data == 1'b1) begin
		$display("*** key has been written : 128'h %08x_%08x_%08x_%08x *** clk_count = %0d ***", txt[127:96], txt[95:64], txt[63:32], txt[31: 0], clk_count);
	end
	right_output_data_new = rightresult;
end endtask

// test task
task test(); begin

key0 = 128'h2b7e151628aed2a6abf7158809cf4f3c;

plain0_key0 = 128'h6bc1bee22e409f96e93d7e117393172a;
plain1_key0 = 128'hae2d8a571e03ac9c9eb76fac45af8e51;
plain2_key0 = 128'h30c81c46a35ce411e5fbc1191a0a52ef;
plain3_key0 = 128'hf69f2445df4f9b17ad2b417be66c3710;

cipher0_key0 = 128'h3ad77bb40d7a3660a89ecaf32466ef97;
cipher1_key0 = 128'hf5d3d58503b9699de785895a96fdbaaf;
cipher2_key0 = 128'h43b1cd7f598ece23881b00e3ed030688;
cipher3_key0 = 128'h7b0c785e27e8ad3f8223207104725dd4;

cipher0_keyn = 128'haa0024fdd891e228677801fe62048ccf;


// instruction
// 1. write_128(input_128, right_result_128); // for 128bit data or key
// 2. wrote_32(input_32); // for 32bit instruction or key
// 3. set_mode(cu,id/ed)
// 4. inport_speed = 16'h5 - 16'hff...ff


set_mode(config_mode, data_mode);
write_128(cipher0_keyn,128'b0);
write_128(cipher0_keyn,128'b0);
write_128(cipher0_keyn,128'b0);
write_128(cipher0_keyn,128'b0);

set_mode(config_mode,instruction_mode);
write_32({KEY,F});
write_128(key0,128'h0);
inport_speed = 'd5;
write_32({SPD,8'h01});
write_32({MOD,E});
set_mode(config_mode,data_mode);
write_128(plain0_key0,cipher0_key0);
write_128(plain1_key0,cipher1_key0);
write_128(plain0_key0,cipher0_key0);
set_mode(config_mode,instruction_mode);
write_32({KEY,N});
write_32({MOD,D});
set_mode(config_mode,data_mode);
write_128(cipher0_keyn,128'h0);
write_128(cipher0_keyn,128'h0);











@(outport_counter[3:0] == 4'h0 && inport_data_counter == outport_counter)
$stop;


end
endtask



                                                 
                                 
                
endmodule

